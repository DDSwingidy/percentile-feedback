// Generated by CoffeeScript 1.7.1
(function() {
  var chart_local_start_hour, draw_chart, floor_to_day, floor_to_hour, floor_to_minute, floor_to_seconds, format_seconds, histogram_to_efficiencies, isotime_to_unixtime, loaded, mean_percentile_rank, timezone, unixtime_now, utc_midnight;

  chart_local_start_hour = 6.0;

  floor_to_seconds = function(unixtime, seconds) {
    return unixtime - (unixtime % seconds);
  };

  floor_to_minute = function(unixtime) {
    return floor_to_seconds(unixtime, 60);
  };

  floor_to_hour = function(unixtime) {
    return floor_to_seconds(unixtime, 3600);
  };

  floor_to_day = function(unixtime) {
    return floor_to_seconds(unixtime, 86400);
  };

  unixtime_now = function() {
    return new Date().getTime() / 1000;
  };

  isotime_to_unixtime = function(isotime) {
    return new Date(isotime).getTime() / 1000;
  };

  format_seconds = function(seconds) {
    var days, hours, minutes;
    days = Math.floor(seconds / 86400);
    seconds = seconds % 86400;
    hours = Math.floor(seconds / 3600);
    seconds = seconds % 3600;
    minutes = Math.floor(seconds / 60);
    seconds = seconds % 60;
    if (days === 0) {
      return "" + hours + "hrs " + minutes + "m";
    } else {
      return "" + days + "d, " + hours + "hrs " + minutes + "m";
    }
  };

  loaded = unixtime_now();

  mean_percentile_rank = function(values, value) {
    var strict, weak;
    strict = values.slice(0).filter(function(v) {
      return v < value;
    });
    weak = values.slice(0).filter(function(v) {
      return v <= value;
    });
    return (strict.length + weak.length) * 50 / values.length;
  };

  timezone = -(new Date().getTimezoneOffset() / 60);

  console.log("timezone", timezone);

  utc_midnight = chart_local_start_hour - timezone;

  draw_chart = function(history, today) {
    var efficiency, height, hours, line, margin, mean_pr, merged, now, outerHeight, outerWidth, svg, value, values, view, width, xAxis, xMap, xMapJitter, xScale, yAxis, yMap, yScale, _i, _j, _len, _len1, _ref;
    $("svg").remove();
    margin = {
      top: 10,
      right: 10,
      bottom: 35,
      left: 50
    };
    width = 960 - margin.left - margin.right;
    height = 360 - margin.top - margin.bottom;
    xScale = d3.scale.linear().domain([0, 24]).range([0, width]);
    xMap = function(d, e) {
      return xScale(e);
    };
    xMapJitter = function(d, e) {
      var shim;
      shim = e % 24;
      shim += 1 * (Math.random() - 0.5);
      if (e === 23) {
        shim += 0.5;
      }
      if (shim < 0) {
        shim = -shim;
      }
      if (shim > 24) {
        shim = 24 - (shim - 24);
      }
      return xScale(shim);
    };
    xAxis = d3.svg.axis().scale(xScale).orient("bottom").ticks(24).tickFormat(function(tick) {
      return (tick + chart_local_start_hour + 24) % 24;
    });
    yScale = d3.scale.linear().domain([0, 100]).range([height, 0]);
    yMap = function(d, e) {
      return yScale(d);
    };
    yAxis = d3.svg.axis().scale(yScale).orient("left").ticks(3);
    outerWidth = width + margin.left + margin.right;
    outerHeight = height + margin.top + margin.bottom;
    svg = d3.select("body").append("svg").attr({
      width: "100%",
      height: "100%",
      id: "chart",
      viewBox: "0 0 " + outerWidth + " " + outerHeight,
      preserveAspectRatio: "xMidYMid meet"
    }).style({
      background: "white",
      "max-height": "480"
    }).append("g").attr("transform", "translate(" + margin.left + ", " + margin.top + ")");
    svg.append("g").attr("class", "x axis").attr("transform", "translate(0, " + height + ")").call(xAxis).append("text").attr("class", "label").attr("x", width / 2).attr("y", 30).style("text-anchor", "end").text("Hour");
    svg.append("g").attr("class", "y axis").call(yAxis).append("text").attr("class", "label").attr("transform", "rotate(-90)").attr("x", -(height / 2.75)).attr("y", -30).style("text-anchor", "end").text("Work Efficiency");
    merged = [];
    for (_i = 0, _len = history.length; _i < _len; _i++) {
      view = history[_i];
      _ref = view.efficiencies;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        efficiency = _ref[_j];
        merged.push(efficiency);
      }
    }
    svg.append("g").attr("class", "history").selectAll("circle").data(merged).enter().append("circle").attr({
      cx: xMapJitter,
      cy: yMap,
      r: 4
    }).style({
      fill: "#cde",
      opacity: "0.5"
    });
    line = d3.svg.line().x(xMap).y(yMap).interpolate("monotone");
    today = today.efficiencies;
    now = unixtime_now();
    hours = (now - (floor_to_day(now))) / 3600;
    hours = hours - utc_midnight;
    today.unshift(0);
    values = merged.slice(0).filter(function(e, i) {
      return (i % Math.floor(hours)) === 0;
    });
    values = values.sort(d3.ascending);
    value = today[Math.floor(hours)];
    mean_pr = mean_percentile_rank(values, value);
    svg.append("defs").append("clipPath").attr("id", "clip").append("rect").attr("width", xScale(hours)).attr("height", height + 20).style("fill", "blue");
    svg.append("g").attr("class", "today line").datum(today.slice(0)).append("path").attr("clip-path", "url(#clip)").attr("d", line);
    return svg.append("text").attr("class", "pr").attr("x", 20).attr("y", 40).text("PR " + (Math.floor(mean_pr)));
  };

  histogram_to_efficiencies = function(histogram) {
    var actual, bin, efficiencies, maximum, _i, _len;
    efficiencies = [];
    actual = 0;
    maximum = 0;
    for (_i = 0, _len = histogram.length; _i < _len; _i++) {
      bin = histogram[_i];
      actual += bin.y;
      maximum += bin.dx / 60;
      efficiencies.push((actual / maximum) * 100);
    }
    return efficiencies;
  };

  $(function() {
    var days, db, opts, remoteCouch;
    db = PouchDB("periods");
    remoteCouch = "http://127.0.0.1:5984/periods";
    opts = {
      live: true
    };
    db.replicate.from(remoteCouch, opts, function() {
      return {};
    });
    days = {};
    console.log("WAYPOINT: Created and replicated DB", unixtime_now() - loaded);
    return db.allDocs({
      include_docs: true,
      ascending: true
    }, function(err, doc) {
      var bins, create_view, current_view, height, histogram, margin, minute, n, row, start_minute, sum, today_duration, total_duration, unixtime, view, view_start, view_tick, view_width, views, width, x, _i, _j, _k, _l, _len, _len1, _ref, _ref1, _ref2, _ref3;
      console.log("WAYPOINT: Queried all documents", unixtime_now() - loaded);
      if (!err) {
        views = [];
        create_view = function() {
          return {
            "start": null,
            "points": [],
            "duration": 0
          };
        };
        view = create_view();
        view_tick = 3600;
        view_width = 24 * view_tick;
        _ref = doc.rows;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          row = _ref[_i];
          unixtime = isotime_to_unixtime(row.doc._id);
          view_start = (floor_to_day(unixtime)) + (3600 * utc_midnight);
          if (view.start === null) {
            view.start = view_start;
            views.push(view);
          } else if (view.start !== view_start) {
            view = create_view();
          }
          view.duration += row.doc.duration;
          start_minute = floor_to_minute(unixtime);
          for (minute = _j = 0, _ref1 = row.doc.duration; _j < _ref1; minute = _j += 60) {
            view.points.push(start_minute + minute);
          }
        }
        console.log("WAYPOINT: Aggregated views", unixtime_now() - loaded);
        margin = {
          top: 10,
          right: 30,
          bottom: 30,
          left: 30
        };
        width = 960 - margin.left - margin.right;
        height = 500 - margin.top - margin.bottom;
        for (_k = 0, _len1 = views.length; _k < _len1; _k++) {
          view = views[_k];
          view.finish = view.start + view_width;
          x = d3.scale.linear().domain([view.start, view.finish]).range([0, width]);
          bins = [];
          for (n = _l = _ref2 = view.start, _ref3 = view.finish; view_tick > 0 ? _l <= _ref3 : _l >= _ref3; n = _l += view_tick) {
            bins.push(n);
          }
          histogram = d3.layout.histogram().bins(bins)(view.points);
          delete view.points;
          view.efficiencies = histogram_to_efficiencies(histogram);
        }
        console.log("WAYPOINT: Computed efficiencies", unixtime_now() - loaded);
        current_view = views.pop();
        draw_chart(views, current_view);
        console.log("WAYPOINT: Drew chart", unixtime_now() - loaded);
        sum = function(a) {
          var total, _len2, _m;
          total = 0;
          for (_m = 0, _len2 = a.length; _m < _len2; _m++) {
            n = a[_m];
            total += n;
          }
          return total;
        };
        total_duration = sum((function() {
          var _len2, _m, _results;
          _results = [];
          for (_m = 0, _len2 = views.length; _m < _len2; _m++) {
            view = views[_m];
            _results.push(view.duration);
          }
          return _results;
        })());
        today_duration = views[views.length - 1].duration;
        return $("body").append($("<p>Total: " + (format_seconds(total_duration)) + " â€” Today: " + (format_seconds(today_duration)) + "</p>"));
      } else {
        return console.log("Sorry, there was an error!");
      }
    });
  });

}).call(this);
